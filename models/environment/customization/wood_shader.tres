[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=13]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.2 ]

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "Texture"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=4]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.2 ]

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
uniform_name = "TextureUniform3"

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = 0.25

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
constant = 0.1

[resource]
code = "shader_type spatial;
render_mode cull_disabled, diffuse_toon, specular_toon, async_visible;

uniform sampler2D Texture;
uniform sampler2D TextureUniform3;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(Texture, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// VectorOp:15
	vec3 n_in15p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out15p0 = n_out3p0 * n_in15p1;

// VectorScalarMix:14
	vec3 n_in14p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in14p1 = vec3(1.00000, 1.00000, 1.00000);
	float n_in14p2 = 0.20000;
	vec3 n_out14p0 = mix(n_in14p0, n_in14p1, n_in14p2);

// VectorOp:2
	vec3 n_out2p0 = n_out15p0 + n_out14p0;

// Scalar:8
	float n_out8p0 = 0.250000;

// Scalar:9
	float n_out9p0 = 0.100000;

// VectorScalarMix:5
	vec3 n_in5p0 = vec3(0.00000, 0.00000, 0.00000);
	float n_in5p2 = 0.20000;
	vec3 n_out5p0 = mix(n_in5p0, n_out2p0, n_in5p2);

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(TextureUniform3, UV.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// Scalar:7
	float n_out7p0 = 0.500000;

// Output:0
	ALBEDO = n_out2p0;
	ROUGHNESS = n_out8p0;
	SPECULAR = n_out9p0;
	EMISSION = n_out5p0;
	NORMALMAP = n_out6p0;
	NORMALMAP_DEPTH = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -696.975, -244.031 )
modes/cull = 2
modes/diffuse = 4
modes/specular = 3
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -140, 20 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -680, -260 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 80, 360 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 60, 520 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 80, 700 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 80, 220 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 80, 280 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( -340, 120 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( -400, -60 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 0, 5, 2, 0, 5, 1, 6, 0, 0, 8, 7, 0, 0, 9, 8, 0, 0, 3, 9, 0, 0, 4, 14, 0, 2, 1, 3, 0, 15, 0, 15, 0, 2, 0 )
