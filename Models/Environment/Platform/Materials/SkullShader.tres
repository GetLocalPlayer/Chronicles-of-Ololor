[gd_resource type="VisualShader" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeVectorFunc" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "tangent"

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 10

[sub_resource type="VisualShaderNodeVectorScalarMix" id=13]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.2 ]

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=15]
constant = Color( 1, 0.943167, 0.69, 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=16]

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "TextureUniform2"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=4]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.3 ]

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
uniform_name = "TextureUniform3"

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = 0.25

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
constant = 0.1

[resource]
code = "shader_type spatial;
render_mode cull_disabled, diffuse_toon, specular_toon, async_visible;

uniform sampler2D TextureUniform;
uniform sampler2D TextureUniform2;
uniform sampler2D TextureUniform3;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// Color:16
	vec3 n_out16p0 = vec3(1.000000, 0.943167, 0.690000);
	float n_out16p1 = 1.000000;

// VectorScalarMix:17
	vec3 n_in17p0 = vec3(0.00000, 0.00000, 0.00000);
	float n_in17p2 = 0.50000;
	vec3 n_out17p0 = mix(n_in17p0, n_out16p0, n_in17p2);

// VectorOp:15
	vec3 n_out15p0 = n_out3p0 * n_out17p0;

// Input:12
	vec3 n_out12p0 = TANGENT;

// Input:11
	vec3 n_out11p0 = NORMAL;

// VectorOp:13
	vec3 n_out13p0 = reflect(n_out12p0, n_out11p0);

// VectorFunc:10
	vec3 n_out10p0 = normalize(n_out13p0);

// TextureUniform:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 n_tex_read = texture(TextureUniform2, n_out10p0.xy);
		n_out4p0 = n_tex_read.rgb;
		n_out4p1 = n_tex_read.a;
	}

// VectorScalarMix:14
	vec3 n_in14p0 = vec3(0.00000, 0.00000, 0.00000);
	float n_in14p2 = 0.20000;
	vec3 n_out14p0 = mix(n_in14p0, n_out4p0, n_in14p2);

// VectorOp:2
	vec3 n_out2p0 = n_out15p0 + n_out14p0;

// Scalar:8
	float n_out8p0 = 0.250000;

// Scalar:9
	float n_out9p0 = 0.100000;

// VectorScalarMix:5
	vec3 n_in5p0 = vec3(0.00000, 0.00000, 0.00000);
	float n_in5p2 = 0.30000;
	vec3 n_out5p0 = mix(n_in5p0, n_out2p0, n_in5p2);

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(TextureUniform3, UV.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// Scalar:7
	float n_out7p0 = 1.000000;

// Output:0
	ALBEDO = n_out2p0;
	ROUGHNESS = n_out8p0;
	SPECULAR = n_out9p0;
	EMISSION = n_out5p0;
	NORMALMAP = n_out6p0;
	NORMALMAP_DEPTH = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -808.84, -91.4 )
modes/cull = 2
modes/diffuse = 4
modes/specular = 3
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -140, 20 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -680, -260 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -540, 120 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 80, 360 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 60, 520 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 80, 700 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 80, 220 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 80, 280 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( -800, 200 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( -1340, 220 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -1300, 120 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( -1060, 180 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( -340, 120 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( -400, -60 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( -840, -20 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( -660, -20 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 0, 5, 2, 0, 5, 1, 6, 0, 0, 8, 7, 0, 0, 9, 8, 0, 0, 3, 9, 0, 0, 4, 12, 0, 13, 0, 11, 0, 13, 1, 13, 0, 10, 0, 14, 0, 2, 1, 4, 0, 14, 1, 10, 0, 4, 0, 3, 0, 15, 0, 15, 0, 2, 0, 16, 0, 17, 1, 17, 0, 15, 1 )
